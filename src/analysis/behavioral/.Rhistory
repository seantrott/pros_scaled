group_by(same) %>%
summarise(mean_distance = mean(distance_transformed))
df_merged = df_merged %>%
mutate(same_inverted = 1 - same) %>%
mutate(distance_transformed = distance_bert * same_inverted * 5)
df_merged %>%
ggplot(aes(x = same,
y = distance_transformed)) +
stat_summary (fun = function(x){mean(x)},
fun.min = function(x){mean(x) - 5*sd(x)/sqrt(length(x))},
fun.max = function(x){mean(x) + 5*sd(x)/sqrt(length(x))},
geom= 'pointrange',
position=position_dodge(width=0.95)) +
theme_minimal()
df_merged %>%
group_by(same) %>%
summarise(mean_distance = mean(distance_transformed))
model_full_acc = glmer(data = df_merged,
correct_response ~ distance_transformed + same +
prior_accuracy +
(1  | subject) +
(1 | word),
control=glmerControl(optimizer="bobyqa"),
family = binomial())
summary(model_full_acc)
df_merged = df_merged %>%
mutate(same_inverted = 1 - same) %>%
mutate(distance_transformed = distance_bert * same_inverted * 100)
df_merged %>%
ggplot(aes(x = same,
y = distance_transformed)) +
stat_summary (fun = function(x){mean(x)},
fun.min = function(x){mean(x) - 5*sd(x)/sqrt(length(x))},
fun.max = function(x){mean(x) + 5*sd(x)/sqrt(length(x))},
geom= 'pointrange',
position=position_dodge(width=0.95)) +
theme_minimal()
df_merged %>%
group_by(same) %>%
summarise(mean_distance = mean(distance_transformed))
model_full_acc = glmer(data = df_merged,
correct_response ~ distance_transformed + same +
prior_accuracy +
(1  | subject) +
(1 | word),
control=glmerControl(optimizer="bobyqa"),
family = binomial())
summary(model_full_acc)
df_merged_correct = df_merged %>%
filter(correct_response == TRUE)
model_full_rt = lmer(data = df_merged_correct,
log_rt ~ distance_bert + same +
prior_rt +
(1 | subject) +
(1 | word),
control=lmerControl(optimizer="bobyqa"),
REML = FALSE)
summary(model_full_rt)
model_full_rt = lmer(data = df_merged_correct,
log_rt ~ distance_transformed + same +
prior_rt +
(1 | subject) +
(1 | word),
control=lmerControl(optimizer="bobyqa"),
REML = FALSE)
summary(model_full_rt)
df_merged_correct %>%
ggplot(aes(x = distance_transformed,
y = log_rt,
color = same)) +
geom_point() +
theme_minimal()
df_merged_correct %>%
ggplot(aes(x = distance_transformed,
y = log_rt,
color = same)) +
geom_point(alpha = .5) +
theme_minimal()
df_merged_correct %>%
ggplot(aes(x = distance_transformed,
y = log_rt,
color = same)) +
geom_point(alpha = .5) +
theme_minimal() +
facet_grid(~ambiguity_type)
df_merged_correct %>%
mutate(distance_binned = ntile(distance_transformed, n = 10)) %>%
group_by(distance_binned, same) %>%
summarise(mean_rt = mean(log_rt),
sd_rt = sd(log_rt),
se_rt = sd(log_rt) / sqrt(n())) %>%
ggplot(aes(x = distance_binned,
y = mean_rt,
color = same)) +
geom_point(alpha = .5) +
geom_errorbar(aes(ymin = mean_rt - 2*se_rt,
ymax = mean_rt + 2*se_rt),
width=.2,
position=position_dodge(.9)) +
theme_minimal() +
facet_grid(~ambiguity_type)
df_merged_correct %>%
mutate(distance_binned = ntile(distance_transformed, n = 10)) %>%
group_by(distance_binned, same) %>%
summarise(mean_rt = mean(log_rt),
sd_rt = sd(log_rt),
se_rt = sd(log_rt) / sqrt(n())) %>%
ggplot(aes(x = distance_binned,
y = mean_rt,
color = same)) +
geom_point(alpha = .5) +
geom_errorbar(aes(ymin = mean_rt - 2*se_rt,
ymax = mean_rt + 2*se_rt),
width=.2,
position=position_dodge(.9)) +
theme_minimal()
df_merged_correct %>%
mutate(distance_binned = ntile(distance_transformed, n = 10)) %>%
group_by(distance_binned, same) %>%
summarise(mean_rt = mean(log_rt),
sd_rt = sd(log_rt),
se_rt = sd(log_rt) / sqrt(n())) %>%
ggplot(aes(x = distance_binned,
y = mean_rt,
color = same)) +
geom_errorbar(aes(ymin = mean_rt - 2*se_rt,
ymax = mean_rt + 2*se_rt),
width=.2,
position=position_dodge(.9)) +
theme_minimal()
s = df_merged_correct %>%
mutate(distance_binned = ntile(distance_transformed, n = 10)) %>%
group_by(distance_binned, same) %>%
summarise(mean_rt = mean(log_rt),
sd_rt = sd(log_rt),
se_rt = sd(log_rt) / sqrt(n()))
View(s)
df_merged_correct %>%
mutate(distance_binned = ntile(distance_bert, n = 10)) %>%
group_by(distance_binned, same) %>%
summarise(mean_rt = mean(log_rt),
sd_rt = sd(log_rt),
se_rt = sd(log_rt) / sqrt(n())) %>%
ggplot(aes(x = distance_binned,
y = mean_rt,
color = same)) +
geom_errorbar(aes(ymin = mean_rt - 2*se_rt,
ymax = mean_rt + 2*se_rt),
width=.2,
position=position_dodge(.9)) +
theme_minimal()
cut
df_merged_correct %>%
mutate(distance_binned = cut(distance_transformed, n = 10))
df_merged_correct %>%
mutate(distance_binned = cut(distance_transformed, breaks = 10))
s = df_merged_correct %>%
mutate(distance_binned = cut(distance_transformed, breaks = 10))
s$distance_binned
df_merged_correct %>%
mutate(distance_binned = cut(distance_transformed, breaks = 10, labels = c(1: 10)))
s = df_merged_correct %>%
mutate(distance_binned = cut(distance_transformed, breaks = 10, labels = c(1: 10)))
s$distance_binned
df_merged_correct %>%
mutate(distance_binned = cut(distance_transformed, breaks = 10, labels = c(1: 10))) %>%
group_by(distance_binned, same) %>%
summarise(mean_rt = mean(log_rt),
sd_rt = sd(log_rt),
se_rt = sd(log_rt) / sqrt(n())) %>%
ggplot(aes(x = distance_binned,
y = mean_rt,
color = same)) +
geom_errorbar(aes(ymin = mean_rt - 2*se_rt,
ymax = mean_rt + 2*se_rt),
width=.2,
position=position_dodge(.9)) +
theme_minimal()
df_merged_correct = df_merged_correct %>%
mutate(same_inverted = 1 - same) %>%
mutate(distance_transformed = distance_bert * same_inverted * 10)
df_merged_correct %>%
mutate(distance_binned = cut(distance_transformed, breaks = 20, labels = c(1: 10))) %>%
group_by(distance_binned, same) %>%
summarise(mean_rt = mean(log_rt),
sd_rt = sd(log_rt),
se_rt = sd(log_rt) / sqrt(n())) %>%
ggplot(aes(x = distance_binned,
y = mean_rt,
color = same)) +
geom_errorbar(aes(ymin = mean_rt - 2*se_rt,
ymax = mean_rt + 2*se_rt),
width=.2,
position=position_dodge(.9)) +
theme_minimal()
df_merged_correct %>%
mutate(distance_binned = cut(distance_transformed, breaks = 20, labels = c(1: 20))) %>%
group_by(distance_binned, same) %>%
summarise(mean_rt = mean(log_rt),
sd_rt = sd(log_rt),
se_rt = sd(log_rt) / sqrt(n())) %>%
ggplot(aes(x = distance_binned,
y = mean_rt,
color = same)) +
geom_errorbar(aes(ymin = mean_rt - 2*se_rt,
ymax = mean_rt + 2*se_rt),
width=.2,
position=position_dodge(.9)) +
theme_minimal()
model_full_rt = lmer(data = df_merged_correct,
log_rt ~ distance_transformed + same +
prior_rt +
(1 | subject) +
(1 | word),
control=lmerControl(optimizer="bobyqa"),
REML = FALSE)
summary(model_full_rt)
df_merged_correct = df_merged_correct %>%
mutate(same_inverted = (1 - same) + .0001) %>%
mutate(distance_transformed = distance_bert * same_inverted * 10)
model_full_rt = lmer(data = df_merged_correct,
log_rt ~ distance_transformed + same +
prior_rt +
(1 | subject) +
(1 | word),
control=lmerControl(optimizer="bobyqa"),
REML = FALSE)
summary(model_full_rt)
df_merged_correct %>%
mutate(distance_binned = cut(distance_transformed, breaks = 20, labels = c(1: 20))) %>%
group_by(distance_binned, same) %>%
summarise(mean_rt = mean(log_rt),
sd_rt = sd(log_rt),
se_rt = sd(log_rt) / sqrt(n())) %>%
ggplot(aes(x = distance_binned,
y = mean_rt,
color = same)) +
geom_errorbar(aes(ymin = mean_rt - 2*se_rt,
ymax = mean_rt + 2*se_rt),
width=.2,
position=position_dodge(.9)) +
theme_minimal()
df_merged_correct %>%
group_by(same) %>%
summarise(mean_distance = mean(distance_transformed))
df_merged_correct %>%
group_by(same) %>%
summarise(mean_distance = mean(distance_transformed),
sd_distance = sd(distance_transformed))
df_by_item = df_merged %>%
group_by(word, same, ambiguity_type) %>%
summarise(mean_rt = mean(log_rt),
sd_rt = sd(log_rt),
accuracy = mean(correct_response),
relatedness = mean(mean_relatedness),
distance = mean(distance_bert),
count = n())
s = df_by_item %>%
pivot_wider(names_from = same, values_from = c(sd_rt, mean_rt, count, accuracy,
relatedness, distance)) %>%
mutate(diff_rt = mean_rt_FALSE - mean_rt_TRUE,
diff_accuracy = accuracy_FALSE - accuracy_TRUE,
diff_distance = distance_FALSE - distance_TRUE,
diff_relatedness = relatedness_FALSE - relatedness_TRUE)
hist(s$diff_rt)
hist(s$diff_accuracy)
s %>%
ggplot(aes(x = diff_accuracy,
fill = ambiguity_type)) +
geom_density(alpha = .5) +
theme_minimal()
model_full_acc = glmer(data = df_merged,
correct_response ~ distance_bert + same + ambiguity_type +
prior_accuracy +
(1  | subject) +
(1 | word),
control=glmerControl(optimizer="bobyqa"),
family = binomial())
df_merged$residuals = residuals(model_full_acc)
df_by_item = df_merged %>%
group_by(word, same, ambiguity_type) %>%
summarise(mean_rt = mean(log_rt),
sd_rt = sd(log_rt),
accuracy = mean(residuals),
relatedness = mean(mean_relatedness),
distance = mean(distance_bert),
count = n())
df_by_item = df_merged %>%
group_by(word, same, ambiguity_type) %>%
summarise(mean_rt = mean(log_rt),
sd_rt = sd(log_rt),
residualized_accuracy = mean(residuals),
relatedness = mean(mean_relatedness),
distance = mean(distance_bert),
count = n())
s = df_by_item %>%
pivot_wider(names_from = same, values_from = c(sd_rt, mean_rt, count, residualized_accuracy,
relatedness, distance)) %>%
mutate(diff_rt = mean_rt_FALSE - mean_rt_TRUE,
diff_accuracy = residualized_accuracy_FALSE - residualized_accuracy_TRUE,
diff_distance = distance_FALSE - distance_TRUE,
diff_relatedness = relatedness_FALSE - relatedness_TRUE)
s %>%
ggplot(aes(x = diff_accuracy,
fill = ambiguity_type)) +
geom_density(alpha = .5) +
theme_minimal()
s %>%
ggplot(aes(x = diff_relatedness,
y = diff_accuracy)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Relatedness (Different - True)",
y = "Accuracy ( Different - True)") +
theme_minimal()
cor.test(s$diff_relatedness,
s$diff_accuracy)
cor.test(s$diff_distance,
s$diff_accuracy)
s %>%
ggplot(aes(x = diff_accuracy,
fill = ambiguity_type)) +
geom_density(alpha = .5) +
theme_minimal()
df_by_item %>%
ggplot(aes(x = residualized_accuracy,
y = same,
fill = ambiguity_type)) +
geom_density_ridges2(aes(height = ..density..),
color=gray(0.25), alpha = 0.5,
scale=0.85, size=0.75, stat="density") +
theme_bw()
model_full_acc = glmer(data = df_merged,
correct_response ~ distance_bert + # same + ambiguity_type +
prior_accuracy +
(1  | subject) +
(1 | word),
control=glmerControl(optimizer="bobyqa"),
family = binomial())
df_merged$residuals = residuals(model_full_acc)
df_by_item = df_merged %>%
group_by(word, same, ambiguity_type) %>%
summarise(mean_rt = mean(log_rt),
sd_rt = sd(log_rt),
residualized_accuracy = mean(residuals),
relatedness = mean(mean_relatedness),
distance = mean(distance_bert),
count = n())
df_by_item %>%
ggplot(aes(x = residualized_accuracy,
y = same,
fill = ambiguity_type)) +
geom_density_ridges2(aes(height = ..density..),
color=gray(0.25), alpha = 0.5,
scale=0.85, size=0.75, stat="density") +
theme_bw()
summary(lm(data = df_by_item,
residualized_accuracy ~ same * ambiguity_type + distance))
model_full_acc = glmer(data = df_merged,
correct_response ~ distance_bert + same + ambiguity_type +
prior_accuracy +
(1  | subject) +
(1 | word),
control=glmerControl(optimizer="bobyqa"),
family = binomial())
df_merged$residuals = residuals(model_full_acc)
df_by_item = df_merged %>%
group_by(word, same, ambiguity_type) %>%
summarise(mean_rt = mean(log_rt),
sd_rt = sd(log_rt),
residualized_accuracy = mean(residuals),
relatedness = mean(mean_relatedness),
distance = mean(distance_bert),
count = n())
df_by_item %>%
ggplot(aes(x = residualized_accuracy,
y = same,
fill = ambiguity_type)) +
geom_density_ridges2(aes(height = ..density..),
color=gray(0.25), alpha = 0.5,
scale=0.85, size=0.75, stat="density") +
theme_bw()
summary(lm(data = df_by_item,
residualized_accuracy ~ same * ambiguity_type + distance))
summary(lm(data = df_by_item,
residualized_accuracy ~ same * ambiguity_type + distance + relatedness))
summary(lm(data = df_by_item,
residualized_accuracy ~ same * ambiguity_type + distance + count))
summary(lm(data = df_by_item,
residualized_accuracy ~ same * ambiguity_type + distance))
setwd("/Users/seantrott/Dropbox/UCSD/Research/IndirectSpeechActs/Prosody/pros_scaled/src/analysis/behavioral/")
df_processed = read_csv("../../../data/processed/behavioral/pros_scaled_processed.csv")
nrow(df_processed)
length(unique(df_processed$subject))
# Filter to just critical stims
df_critical = df_processed %>%
# Critical trials
filter(condition %in% c("statement", "request", "question")) %>%
# The second of each nested trial (i.e., where participant has a response)
filter(!is.na(response))
df_critical = df_critical %>%
filter(Native_Speaker != "No") ## Corrected
nrow(df_critical)
length(unique(df_critical$subject))
```
We also exclude participants with any missing data:
```{r}
# 9 speakers * 12 utterances = 108 items
TOTAL = 108
df_counts = df_critical %>%
group_by(subject) %>%
summarise(count = n())
df_exclude = df_counts %>%
filter(count < TOTAL)
df_critical = df_critical %>%
filter((subject %in% df_exclude$subject) == FALSE)
nrow(df_critical)
length(unique(df_critical$subject))
```
## Additional preprocessing
```{r}
## Here, we reset condition labels (Request vs. Non-Request)
df_critical$Intent = factor(fct_recode(df_critical$condition,
"Request" = "request",
"Non-Request" = "statement",
"Non-Request" = "question"), levels = c("Non-Request", "Request"))
## Here, we reset response labels (Request vs. Non-Request)
df_critical$Interpretation = factor(df_critical$response, levels = c("Non-Request", "Request"))
## We also create several more indicator variables for ease of plotting and merging
df_critical = df_critical %>%
mutate(correct = Interpretation == Intent) %>%
mutate(correct_numeric = as.numeric(correct),
## 1 for Request, 0 for Non-Request
response_numeric = as.numeric(Interpretation) - 1) %>%
mutate(topic = tolower(topic))
# For merging with norming data
df_critical$topic = fct_recode(df_critical$topic,
"temperature" = "temp")
```
## Merge with norming data
```{r}
df_normed = read_csv("../../../data/processed/norming/item_means.csv")
df_merged = df_critical %>%
inner_join(df_normed, by = c("form", "topic"))
nrow(df_critical)
nrow(df_merged)
mean(df_merged$correct)
df_merged %>%
group_by(Intent) %>%
summarise(mean_request = mean(response_numeric))
df_merged %>%
group_by(form, Intent) %>%
summarise(mean_request = mean(response_numeric))
df_merged %>%
group_by(form, Intent) %>%
summarise(mean_request = mean(correct))
df_merged %>%
group_by(form, Intent) %>%
summarise(accuracy = mean(correct))
df_merged %>%
group_by(form) %>%
summarise(accuracy = mean(correct))
df_merged %>%
group_by(form, Intent) %>%
summarise(mean_request = mean(response_numeric))
df_merged %>%
group_by(Intent) %>%
summarise(mean_request = mean(response_numeric))
df_merged %>%
group_by(form, Intent) %>%
summarise(mean_request = mean(response_numeric))
df_merged %>%
group_by(form) %>%
summarise(mean_request = mean(response_numeric))
df_merged %>%
ggplot(aes(x = mean_request,
y = response_numeric,
color = Intent,
shape = Intent)) +
stat_summary (fun = function(x){mean(x)},
fun.min = function(x){mean(x) - 1*sd(x)/sqrt(length(x))},
fun.max = function(x){mean(x) + 1*sd(x)/sqrt(length(x))},
geom= 'pointrange') +
theme_minimal() +
ggtitle("Request interpretations by p(request)") +
xlab("P(request)") +
ylab("Proportion choosing 'request'") +
scale_y_continuous(limits = c(0, 1))
s = df_merged %>%
group_by(mean_request) %>%
summarise(mean_request = mean(response_numeric))
nrow(s)
df_normed
table(df_critical$topic)
table(df_normed$topic)
df_normed$topic %in% df_merged$topic
table(df_merged$topic)
df_merged %>%
group_by(mean_request) %>%
summarise(mean_request = mean(response_numeric),
count = n())
s = df_merged %>%
group_by(mean_request) %>%
summarise(mean_request = mean(response_numeric),
count = n())
View(s)
s = df_merged %>%
group_by(mean_request) %>%
summarise(p_request = mean(response_numeric),
count = n())
View(s)
View(df_normed)
